#include <Arduino.h>
#include <WiFiS3.h>         // UNO R4 WiFi 용
#include <PubSubClient.h>   // MQTT 라이브러리

#define RX_BAUD 9600

// WiFi 정보
const char* ssid = "SmartCenter 2.4G";
const char* password = "12345678";

// MQTT 서버 정보
const char* mqtt_server = "pubcode2.iptime.org";
const int mqtt_port = 31883;
const char* mqtt_topic_sub = "SC_sub";
const char* mqtt_topic_pub = "SC_pub";

WiFiClient espClient;
PubSubClient client(espClient);

// HC-SR04 센서1, 센서2 핀
#define TRIG1 5
#define ECHO1 4
#define TRIG2 2
#define ECHO2 3

// 진동 모터
#define VIBRATION_MOTOR 8
bool vibrationOn = false;

// 버저
#define BUZZER_PIN 9

// 거리센서 값 주기적 전송용
unsigned long lastSendTime = 0;
const unsigned long sendInterval = 1000; // 1초마다 전송

// 음계 정의 (슈퍼마리오 테마용)
#define NOTE_E4 330
#define NOTE_F4 349
#define NOTE_G4 392
#define NOTE_A4 440
#define NOTE_AS4 466
#define NOTE_B4 494
#define NOTE_C5 523
#define NOTE_D5 587
#define NOTE_E5 659
#define NOTE_F5 698
#define NOTE_G5 784
#define NOTE_A5 880

// 슈퍼마리오 테마 (짧은 버전)
int marioMelody[] = {
  NOTE_E5, NOTE_E5, 0, NOTE_E5,
  0, NOTE_C5, NOTE_E5, 0,
  NOTE_G5, 0, 0,  0,
  NOTE_G4, 0, 0, 0,

  NOTE_C5, 0, 0, NOTE_G4,
  0, 0, NOTE_E4, 0,
  0, NOTE_A4, 0, NOTE_B4,
  0, NOTE_AS4, NOTE_A4, 0,

  NOTE_G4, NOTE_E5, NOTE_G5,
  NOTE_A5, 0, NOTE_F5, NOTE_G5,
  0, NOTE_E5, 0, NOTE_C5,
  NOTE_D5, NOTE_B4, 0, 0
};

int marioDurations[] = {
  150, 150, 150, 150,
  150, 150, 150, 150,
  150, 150, 150, 150,
  150, 150, 150, 150,

  150, 150, 150, 150,
  150, 150, 150, 150,
  150, 150, 150, 150,
  150, 150, 150, 150,

  150, 150, 150,
  150, 150, 150, 150,
  150, 150, 150, 150,
  150, 150, 150, 150
};

int marioLength = sizeof(marioMelody) / sizeof(int);

// 초음파 거리 측정 함수
long getDistance(int trigPin, int echoPin) {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duration = pulseIn(echoPin, HIGH, 20000); // 타임아웃 20ms
  if (duration == 0) return 999; // 측정 실패시 큰 값 반환
  long distance = duration * 0.034 / 2;  // cm
  return distance;
}

// 슈퍼마리오 멜로디 연주
void playMario() {
  for (int i = 0; i < marioLength; i++) {
    int noteDuration = marioDurations[i];
    if (marioMelody[i] == 0) {
      noTone(BUZZER_PIN);
    } else {
      tone(BUZZER_PIN, marioMelody[i], noteDuration);
    }
    delay(noteDuration * 1.3);
  }
  noTone(BUZZER_PIN);
}

// MQTT 재연결
void reconnect() {
  while (!client.connected()) {
    Serial.print("MQTT 연결 시도...");
    if (client.connect("ArduinoWiFiClient")) {
      Serial.println("연결됨");
      client.subscribe(mqtt_topic_sub);
    } else {
      Serial.print("실패, rc=");
      Serial.print(client.state());
      Serial.println(" 5초 후 재시도");
      delay(5000);
    }
  }
}

void setup() {
  Serial.begin(9600);

  // 초음파 핀 모드 설정
  pinMode(TRIG1, OUTPUT);
  pinMode(ECHO1, INPUT);
  pinMode(TRIG2, OUTPUT);
  pinMode(ECHO2, INPUT);

  // 진동모터 + 버저 핀
  pinMode(VIBRATION_MOTOR, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  digitalWrite(VIBRATION_MOTOR, LOW);

  Serial1.begin(RX_BAUD); // Nano 33 TX ↔ WiFi RX 연결
  delay(2000);

  // WiFi 연결
  Serial.print("WiFi 연결 중: ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("
WiFi 연결 성공!");
  Serial.print("IP 주소: ");
  Serial.println(WiFi.localIP());

  // MQTT 설정
  client.setServer(mqtt_server, mqtt_port);

  Serial.println("HC-SR04 / Vibration Motor / Buzzer (Super Mario) 시작");
  Serial.println("WiFi 보드 - 낙상 신호 수신 대기 중...");
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // 초음파 센서 값 읽기
  long dist1 = getDistance(TRIG1, ECHO1);
  long dist2 = getDistance(TRIG2, ECHO2);

  Serial.print("센서1 거리: ");
  Serial.print(dist1);
  Serial.print(" cm | 센서2 거리: ");
  Serial.print(dist2);
  Serial.println(" cm");

  // 주기적으로 거리값 MQTT 전송
  unsigned long now = millis();
  if (now - lastSendTime > sendInterval) {
    lastSendTime = now;
    char msg[100];
    sprintf(msg, "{\"sensor1\":%ld, \"sensor2\":%ld}", dist1, dist2);
    client.publish(mqtt_topic_pub, msg);
    Serial.print("MQTT 전송: ");
    Serial.println(msg);
  }

  // 낙상 신호 수신 처리
  if (Serial1.available()) {
    String data = Serial1.readStringUntil('\n');
    data.trim();
    Serial.println(data);
    if (data == "FALL") {
      Serial.println(">>> 낙상 신호 수신됨!");
      client.publish(mqtt_topic_pub, "{\"event\":\"FALL\"}");
    }
  }

  // ===== 거리 조건으로 자동 제어 =====
  if (dist1 < 20 || dist2 < 20) {
    if (!vibrationOn) {
      vibrationOn = true;
      Serial.println("거리 < 20cm → 진동모터 ON (1초) + 마리오 테마");
      digitalWrite(VIBRATION_MOTOR, HIGH);
      delay(1000);
      digitalWrite(VIBRATION_MOTOR, LOW);

      // 즉시 MQTT 경고 전송
      char alertMsg[100];
      sprintf(alertMsg, "{\"alert\":\"distance<20\", \"sensor1\":%ld, \"sensor2\":%ld}", dist1, dist2);
      client.publish(mqtt_topic_pub, alertMsg);
      
      playMario();
    }
  } else {
    if (vibrationOn) {
      vibrationOn = false;
      Serial.println("거리 >= 20cm → 진동모터 OFF + 버저 OFF");
      digitalWrite(VIBRATION_MOTOR, LOW);
      noTone(BUZZER_PIN);
    }
  }

  delay(300);
}
